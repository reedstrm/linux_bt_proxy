// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api_options.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:void)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Void {
    // special fields
    // @@protoc_insertion_point(special_field:void.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Void {
    fn default() -> &'a Void {
        <Void as ::protobuf::Message>::default_instance()
    }
}

impl Void {
    pub fn new() -> Void {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Void>(
            "void",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Void {
    const NAME: &'static str = "void";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Void {
        Void::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Void {
        static instance: Void = Void {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Void {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("void").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Void {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Void {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:APISourceType)
pub enum APISourceType {
    // @@protoc_insertion_point(enum_value:APISourceType.SOURCE_BOTH)
    SOURCE_BOTH = 0,
    // @@protoc_insertion_point(enum_value:APISourceType.SOURCE_SERVER)
    SOURCE_SERVER = 1,
    // @@protoc_insertion_point(enum_value:APISourceType.SOURCE_CLIENT)
    SOURCE_CLIENT = 2,
}

impl ::protobuf::Enum for APISourceType {
    const NAME: &'static str = "APISourceType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<APISourceType> {
        match value {
            0 => ::std::option::Option::Some(APISourceType::SOURCE_BOTH),
            1 => ::std::option::Option::Some(APISourceType::SOURCE_SERVER),
            2 => ::std::option::Option::Some(APISourceType::SOURCE_CLIENT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<APISourceType> {
        match str {
            "SOURCE_BOTH" => ::std::option::Option::Some(APISourceType::SOURCE_BOTH),
            "SOURCE_SERVER" => ::std::option::Option::Some(APISourceType::SOURCE_SERVER),
            "SOURCE_CLIENT" => ::std::option::Option::Some(APISourceType::SOURCE_CLIENT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [APISourceType] = &[
        APISourceType::SOURCE_BOTH,
        APISourceType::SOURCE_SERVER,
        APISourceType::SOURCE_CLIENT,
    ];
}

impl ::protobuf::EnumFull for APISourceType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("APISourceType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for APISourceType {
    fn default() -> Self {
        APISourceType::SOURCE_BOTH
    }
}

impl APISourceType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<APISourceType>("APISourceType")
    }
}

/// Extension fields
pub mod exts {

    pub const needs_setup_connection: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MethodOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1038, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const needs_authentication: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MethodOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1039, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const id: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, u32> = ::protobuf::ext::ExtFieldOptional::new(1036, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_UINT32);

    pub const source: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::EnumOrUnknown<super::APISourceType>> = ::protobuf::ext::ExtFieldOptional::new(1037, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_ENUM);

    pub const ifdef: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(1038, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);

    pub const log: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1039, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const no_delay: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, bool> = ::protobuf::ext::ExtFieldOptional::new(1040, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_BOOL);

    pub const base_class: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(1041, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11api_options.proto\x1a\x20google/protobuf/descriptor.proto\"\x06\n\
    \x04void*F\n\rAPISourceType\x12\x0f\n\x0bSOURCE_BOTH\x10\0\x12\x11\n\rSO\
    URCE_SERVER\x10\x01\x12\x11\n\rSOURCE_CLIENT\x10\x02:[\n\x16needs_setup_\
    connection\x18\x8e\x08\x20\x01(\x08\x12\x1e.google.protobuf.MethodOption\
    s:\x04trueR\x14needsSetupConnection:X\n\x14needs_authentication\x18\x8f\
    \x08\x20\x01(\x08\x12\x1e.google.protobuf.MethodOptions:\x04trueR\x13nee\
    dsAuthentication:3\n\x02id\x18\x8c\x08\x20\x01(\r\x12\x1f.google.protobu\
    f.MessageOptions:\x010R\x02id:U\n\x06source\x18\x8d\x08\x20\x01(\x0e2\
    \x0e.APISourceType\x12\x1f.google.protobuf.MessageOptions:\x0bSOURCE_BOT\
    HR\x06source:6\n\x05ifdef\x18\x8e\x08\x20\x01(\t\x12\x1f.google.protobuf\
    .MessageOptionsR\x05ifdef:8\n\x03log\x18\x8f\x08\x20\x01(\x08\x12\x1f.go\
    ogle.protobuf.MessageOptions:\x04trueR\x03log:B\n\x08no_delay\x18\x90\
    \x08\x20\x01(\x08\x12\x1f.google.protobuf.MessageOptions:\x05falseR\x07n\
    oDelay:?\n\nbase_class\x18\x91\x08\x20\x01(\t\x12\x1f.google.protobuf.Me\
    ssageOptionsR\tbaseClass\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Void::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(APISourceType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
